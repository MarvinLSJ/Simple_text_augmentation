import re
import copy
import jieba

#if uchar >= u'\u4e00' and uchar <= u'\u9fa5':
# https://blog.csdn.net/qinbaby/article/details/23201883
def clean(sent):
    clean_s = re.sub("[。；;!！？?.]",",",sent)
    clean_s = re.sub('&nbsp', ",", clean_s)
    clean_s = re.sub('&#x1f61c', " ", clean_s)
    clean_s = re.sub('&#x1f444', " ", clean_s)
    return clean_s

def remove_html(string):
   pattern_list = [
       '<(img|div)?.*>?',
       '<(img|div|span|url)[-A-Za-z0-9+&@#/%?=~_!:,.;"sr…… ]+',
       '<(div|ul|url|body|html|b|p|img|span|a)+.*/(div|ul|url|body|html|b|p|img|span|a)>',
       '(https?|ftp|file)://[-A-Za-z0-9+&@#/%?=~_|!:,.;]+[-A-Za-z0-9+&@#/%=~_|]'
   ]
   for pattern in pattern_list:
       temp = re.search(pattern, string)
       if temp != None:
           result = temp.group(0)
           string = string.replace(result, '')
   return string



"""
Input: 
origin_sent: sentence to be augmented, 
word_dict: word - synonym index
thesaurus_all: synonym 

Output:
aug_sentences: Augmented sentences (list)

This function takes in the original sentence, 
cut by jieba and find words that can be substituted and substitution choices.

According to the ratio between length of original sentence and the amount of substitution words' count, 
The augmented sentences will be generated by substituting 1,2,3 words.

"""

def aug_sent(origin_sent, word_dict, thesaurus_all, sub_threshold=10):
    sub_count = 0
    choices = {}
    origin_sent_list = list(jieba.cut(origin_sent))
    for word in origin_sent_list:
        if word in word_dict.keys():
            sub_count += 1
            thesaurus_list = thesaurus_all[word_dict[word]].split(',')
            choice = []
    #         print(word,':', thesaurus_all[word_dict[word]].split(','))
            for w in thesaurus_list:
                if word == w:
                    continue
                else: choice.append(w)
    #         print(word, 'substitution choice:',choice)
            choices[word] = choice

    # print('original sent len:', len(origin_sent_list))
    # print('substituable word counts:', sub_count)
    # print(choices)

    aug_sentences = []

    if len(choices)>sub_threshold:
        # print(origin_sent)
        return aug_sentences

    if len(choices) == 0:
        return aug_sentences
    # 如果 原句词数量/可替换的词数量 > 3 则至少替换三个词才能算新句子
    elif len(origin_sent_list)/float(len(choices)) > 3:
        aug_sentences = sub3(origin_sent_list, choices)

    # 如果 3 > 原句词数量/可替换的词数量 > 2 则至少替换两个词才能算新句子
    elif len(origin_sent_list)/float(len(choices)) > 2:
        aug_sentences = sub2(origin_sent_list, choices)

    else: aug_sentences = sub1(origin_sent_list, choices)

#     print('\naug_amount:',len(aug_sentences))
    return aug_sentences



"""
Input:
origin_sent_list: cutted original sentence word list
s: word that will be substituted
sub_list: substitution choices

Output:
new_sents: generated new sentences in list

"""

def sub(origin_sent_list, s, sub_list):
    new_sents = []
    for i in range(len(origin_sent_list)):
        if origin_sent_list[i] == s:
            for sub_w in sub_list:
                new_sent_list = copy.copy(origin_sent_list)
                new_sent_list[i] = sub_w
                new_sents.append(new_sent_list)
#                 new_sents.append(''.join(new_sent_list))
    return new_sents


"""
substitute only one word with all choices
"""

# sub1(origin_sent_list, choices)
def sub1(origin_sent_list, choices):
    choices_list = list(choices.keys())
    all_list = []
    for i in range(len(choices_list)):
        all_list.extend(sub(origin_sent_list, choices_list[i], choices[choices_list[i]]))

    all_new = []
    for s_list in all_list:
        all_new.append(''.join(s_list))
    return all_new

"""
substitute two words
"""

# sub2(origin_sent_list, choices)
def sub2(origin_sent_list, choices):
    choices_list = list(choices.keys())
    all_list = []
    for i in range(len(choices_list)):
        j = i
        for j in range(j+1,len(choices_list)-1):
#             print(choices_list[i],choices_list[j])
            sub_first = sub(origin_sent_list, choices_list[i], choices[choices_list[i]])
#             print('first',sub_first)
            for sent in sub_first:
                all_list.extend(sub(sent, choices_list[j], choices[choices_list[j]]))
#             print('all',all_list)
#             print(len(all_list))

    all_new = []
    for s_list in all_list:
        all_new.append(''.join(s_list))
    return all_new

"""
substitute three words
"""

# sub3(origin_sent_list, choices)
def sub3(origin_sent_list, choices):
    choices_list = list(choices.keys())
    sub_second = []
    all_list = []
    for i in range(len(choices_list)):
        j = i
        for j in range(j+1,len(choices_list)-1):
            sub_first = sub(origin_sent_list, choices_list[i], choices[choices_list[i]])
            for sent in sub_first:
                sub_second.extend(sub(sent, choices_list[j], choices[choices_list[j]]))
            k = j

            for k in range(k+1, len(choices_list)-1):
    #             print(choices_list[i],choices_list[j], choices_list[k])
                for sent in sub_second:
                    all_list.extend(sub(sent, choices_list[k], choices[choices_list[k]]))
    #         print(len(all_list))

    all_new = []
    for s_list in all_list:
        all_new.append(''.join(s_list))
    return all_new